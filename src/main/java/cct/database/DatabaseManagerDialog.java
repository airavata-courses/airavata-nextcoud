/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cct.database;

import cct.GlobalSettings;
import java.awt.Frame;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author vvv900
 */
public class DatabaseManagerDialog extends javax.swing.JDialog {

  private Set<String> databases;
  private DatabaseManager databaseManager;

  /**
   * Creates new form DatabaseManagerDialog
   */
  public DatabaseManagerDialog(Frame parent, boolean modal) {
    super(parent, modal);
    initComponents();
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
   * content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanel1 = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    databaseList = new javax.swing.JList();
    jPanel2 = new javax.swing.JPanel();
    addDBButton = new javax.swing.JButton();
    removeSelectedButton = new javax.swing.JButton();
    initButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();

    setTitle("Databases");
    setAlwaysOnTop(true);

    jPanel1.setLayout(new java.awt.BorderLayout());

    databaseList.setBorder(javax.swing.BorderFactory.createTitledBorder("Available Databases"));
    databaseList.setModel(new javax.swing.AbstractListModel() {
      String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
      public int getSize() { return strings.length; }
      public Object getElementAt(int i) { return strings[i]; }
    });
    jScrollPane1.setViewportView(databaseList);

    jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

    getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

    addDBButton.setText("Add Database");
    addDBButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        addDBButtonActionPerformed(evt);
      }
    });
    jPanel2.add(addDBButton);

    removeSelectedButton.setText("Remove Selected");
    removeSelectedButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        removeSelectedButtonActionPerformed(evt);
      }
    });
    jPanel2.add(removeSelectedButton);

    initButton.setText("Initialize/Reset DB");
    initButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        initButtonActionPerformed(evt);
      }
    });
    jPanel2.add(initButton);

    cancelButton.setText("Cancel");
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancelButtonActionPerformed(evt);
      }
    });
    jPanel2.add(cancelButton);

    getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private Set<String> getDatabases() {
    return databases;
  }

  private void setDatabases(Set<String> databases) {
    this.databases = databases;
    DefaultListModel dlm = new DefaultListModel();
    for (String str : databases) {
      dlm.addElement(str);
    }
    databaseList.setModel(dlm);
  }

  private void setDatabases(String[] dbEntries) {
    databases.clear();
    DefaultListModel dlm = new DefaultListModel();
    for (String str : dbEntries) {
      databases.add(str);
      dlm.addElement(str);
    }
    databaseList.setModel(dlm);
  }

  public DatabaseManager getDatabaseManager() {
    return databaseManager;
  }

  public void setDatabaseManager(DatabaseManager databaseManager) {
    this.databaseManager = databaseManager;
  }


  private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    this.setVisible(false);
  }//GEN-LAST:event_cancelButtonActionPerformed

  private void removeSelectedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSelectedButtonActionPerformed
    int[] list = this.databaseList.getSelectedIndices(); //   List list = this.databaseList.getSelectedValuesList();
    //int[] list = databaseList.getSelectedIndices();databaseList.getModel().
    if (list == null || list.length < 1) {
      JOptionPane.showMessageDialog(this, "Nothing to delete", "Nothing to delete", JOptionPane.WARNING_MESSAGE);
      return;
    }
    DefaultListModel dlm = (DefaultListModel) databaseList.getModel();
    for (int i : list) {
      dlm.removeElementAt(i);
    }
    validate();
  }//GEN-LAST:event_removeSelectedButtonActionPerformed

  private void addDBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDBButtonActionPerformed
    ConnectToDatabaseDialog connectToDatabaseDialog = new ConnectToDatabaseDialog(new Frame(), true);
    connectToDatabaseDialog.setLocationRelativeTo(this);
    connectToDatabaseDialog.setDatabaseManager(databaseManager);
    connectToDatabaseDialog.validate();
    connectToDatabaseDialog.setAlwaysOnTop(true);
    connectToDatabaseDialog.setVisible(true);

    if (connectToDatabaseDialog.isDialogCancelled()) {
      return;
    }
    // --- 
    connectToDatabaseDialog.dispose();
    this.setDatabases(databaseManager.getDBEntriesAsSortedArray());

  }//GEN-LAST:event_addDBButtonActionPerformed

  private void initButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initButtonActionPerformed
    //List list = this.databaseList.getSelectedValuesList();
    int[] list = this.databaseList.getSelectedIndices();
    //int[] list = databaseList.getSelectedIndices();databaseList.getModel().
    if (list == null || list.length < 1) {
      JOptionPane.showMessageDialog(this, "Select database first", "Select database first", JOptionPane.WARNING_MESSAGE);
      return;
    }
    for (int i : list) {
      try {
        databaseManager.resetDBEntry(databaseList.getModel().getElementAt(i).toString());
      } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Error reseting/creating database: " + ex.getMessage(), "Error",
            JOptionPane.ERROR_MESSAGE);
        return;
      }
    }
    JOptionPane.showMessageDialog(this, "Initialization/reset of database(s) was successful", "Success",
        JOptionPane.INFORMATION_MESSAGE);
  }//GEN-LAST:event_initButtonActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      Logger.getLogger(DatabaseManagerDialog.class.getName()).log(Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      Logger.getLogger(DatabaseManagerDialog.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      Logger.getLogger(DatabaseManagerDialog.class.getName()).log(Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      Logger.getLogger(DatabaseManagerDialog.class.getName()).log(Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {

        DatabaseManagerDialog dialog = new DatabaseManagerDialog(new javax.swing.JFrame(), true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
          @Override
          public void windowClosing(java.awt.event.WindowEvent e) {
            System.exit(0);
          }
        });
        Set<String> db = new HashSet<String>();
        //db.add("mysql:localhost:chemistry");
        //db.add("sqlite:chemistry.db");
        dialog.setDatabases(db);

        DatabaseManager dbm = new DatabaseManager();
        try {
          dbm.initiateFromProperties(GlobalSettings.getProperties());

        } catch (Exception ex) {
          Logger.getLogger(DatabaseDriver.class.getName()).log(Level.SEVERE, null, ex);
        }

        dialog.setDatabaseManager(dbm);
        dialog.setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton addDBButton;
  private javax.swing.JButton cancelButton;
  private javax.swing.JList databaseList;
  private javax.swing.JButton initButton;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JButton removeSelectedButton;
  // End of variables declaration//GEN-END:variables
}
