/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cct.database;

import cct.GlobalSettings;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author vvv900
 */
public class ConnectToDatabaseDialog extends javax.swing.JDialog {

  private DatabaseManager databaseManager;
  private boolean isAdjusting = false;
  private boolean dialogCancelled = false;

  /**
   * Creates new form ConnectToDatabaseDialog
   */
  public ConnectToDatabaseDialog(java.awt.Frame parent, boolean modal) {
    super(parent, modal);
    initComponents();
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
   * content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanel1 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    hostnameTextField = new javax.swing.JTextField();
    jLabel2 = new javax.swing.JLabel();
    usernameTextField = new javax.swing.JTextField();
    jLabel3 = new javax.swing.JLabel();
    passwordField = new javax.swing.JPasswordField();
    jLabel4 = new javax.swing.JLabel();
    databaseTextField = new javax.swing.JTextField();
    jLabel5 = new javax.swing.JLabel();
    portTextField = new javax.swing.JTextField();
    jLabel6 = new javax.swing.JLabel();
    dbInterfaceComboBox = new javax.swing.JComboBox();
    jPanel2 = new javax.swing.JPanel();
    connectDBButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

    jPanel1.setLayout(new java.awt.GridLayout(6, 2));

    jLabel1.setText("Hostname (if any):");
    jPanel1.add(jLabel1);

    hostnameTextField.setText("localhost");
    jPanel1.add(hostnameTextField);

    jLabel2.setText("Username (if any):");
    jPanel1.add(jLabel2);

    usernameTextField.setText("jamberoo");
    jPanel1.add(usernameTextField);

    jLabel3.setText("Password (if any):");
    jPanel1.add(jLabel3);

    passwordField.setText("jPasswordField1");
    jPanel1.add(passwordField);

    jLabel4.setText("Database:");
    jPanel1.add(jLabel4);

    databaseTextField.setText("jamberoo");
    databaseTextField.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        databaseTextFieldActionPerformed(evt);
      }
    });
    jPanel1.add(databaseTextField);

    jLabel5.setText("Port (if any):");
    jPanel1.add(jLabel5);

    portTextField.setText("3306");
    jPanel1.add(portTextField);

    jLabel6.setText("Database type:");
    jPanel1.add(jLabel6);

    dbInterfaceComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
    dbInterfaceComboBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        dbInterfaceComboBoxActionPerformed(evt);
      }
    });
    jPanel1.add(dbInterfaceComboBox);

    getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

    connectDBButton.setText("Connect");
    connectDBButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        connectDBButtonActionPerformed(evt);
      }
    });
    jPanel2.add(connectDBButton);

    cancelButton.setText("Cancel");
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancelButtonActionPerformed(evt);
      }
    });
    jPanel2.add(cancelButton);

    getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  public boolean isDialogCancelled() {
    return dialogCancelled;
  }

  public DatabaseManager getDatabaseManager() {
    return databaseManager;
  }

  public void setDatabaseManager(DatabaseManager databaseManager) {
    this.databaseManager = databaseManager;
    Map<String, DatabaseDriver> drivers = this.databaseManager.getDatabaseDrivers();
    isAdjusting = true;
    dbInterfaceComboBox.removeAllItems();
    for (String dname : drivers.keySet()) {
      dbInterfaceComboBox.addItem(dname);
    }
    isAdjusting = false;
    dbInterfaceComboBox.setSelectedIndex(0);
  }


  private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    dialogCancelled = true;
    this.setVisible(false);
  }//GEN-LAST:event_cancelButtonActionPerformed

  private void databaseTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseTextFieldActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_databaseTextFieldActionPerformed

  private void dbInterfaceComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbInterfaceComboBoxActionPerformed
    if (isAdjusting) {
      return;
    }
    Object obj = dbInterfaceComboBox.getSelectedItem();
    DatabaseDriver driver = databaseManager.getDatabaseDrivers().get(obj);
    if (driver == null) {
      JOptionPane.showMessageDialog(this, "INTERNAL ERROR: driver == null for " + obj.toString(),
          "Error", JOptionPane.ERROR_MESSAGE);
      return;
    }
    hostnameTextField.setEnabled(driver.isUseHostname());
    hostnameTextField.setText(driver.getDefaultHostname());
    // ---
    usernameTextField.setEnabled(driver.isUseUsername());
    usernameTextField.setText(driver.getDefaultUsername());
    // ---
    passwordField.setEnabled(driver.isUsePassword());
    passwordField.setText(driver.getDefaultPassword());
    // ---
    portTextField.setText(String.valueOf(driver.getDefaultPort()));
    this.portTextField.setEnabled(driver.isUsePort());
    // ---
    this.databaseTextField.setText(driver.getDefaultDatabase());
  }//GEN-LAST:event_dbInterfaceComboBoxActionPerformed

  private void connectDBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectDBButtonActionPerformed
    // ---
    Object obj = dbInterfaceComboBox.getSelectedItem();
    if (obj == null) {
      JOptionPane.showMessageDialog(this, "ERROR: No DB type was selected", "Error", JOptionPane.ERROR_MESSAGE);
      return;
    }
    String dbType = (String) obj;
    DatabaseDriver driver = databaseManager.getDatabaseDrivers().get(dbType);
    String host = this.hostnameTextField.getText().trim();
    String database = this.databaseTextField.getText().trim();
    if (database.length() < 1) {
      JOptionPane.showMessageDialog(this, "ERROR: No database name selected", "Error",
          JOptionPane.ERROR_MESSAGE);
      return;
    }
    String user = this.usernameTextField.getText().trim();
    char[] password = this.passwordField.getPassword();
    int port = 0;
    String portStr = portTextField.getText().trim();
    if (portStr.length() > 0) {
      try {
        port = Integer.parseInt(portStr);
      } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "ERROR: Cannot parse port number " + portStr, "Error",
            JOptionPane.ERROR_MESSAGE);
        return;
      }
    }
    // ---
    String newDBEntry = "";
    try {
      newDBEntry = databaseManager.makeAndRegisterConnection(driver, database, host, user, password);
    } catch (Exception ex) {
      Logger.getLogger(ConnectToDatabaseDialog.class.getName()).log(Level.SEVERE, null, ex);
      JOptionPane.showMessageDialog(this, "ERROR: Cannot make connection to database " + database, "Error",
          JOptionPane.ERROR_MESSAGE);
      return;
    }

    JOptionPane.showMessageDialog(this, "Connection to " + newDBEntry + " was successfully established", "Success",
        JOptionPane.INFORMATION_MESSAGE);

    dialogCancelled = false;
    this.setVisible(false);
  }//GEN-LAST:event_connectDBButtonActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    ConnectToDatabaseDialog dialog = new ConnectToDatabaseDialog(new javax.swing.JFrame(), true);
    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
      @Override
      public void windowClosing(java.awt.event.WindowEvent e) {
        System.exit(0);
      }
    });

    DatabaseManager dbm = new DatabaseManager();
    try {
      dbm.initiateFromProperties(GlobalSettings.getProperties());
    } catch (Exception ex) {
      Logger.getLogger(DatabaseDriver.class.getName()).log(Level.SEVERE, null, ex);
      System.exit(1);
    }
    dialog.setDatabaseManager(dbm);
    dialog.setVisible(true);
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton cancelButton;
  private javax.swing.JButton connectDBButton;
  private javax.swing.JTextField databaseTextField;
  private javax.swing.JComboBox dbInterfaceComboBox;
  private javax.swing.JTextField hostnameTextField;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPasswordField passwordField;
  private javax.swing.JTextField portTextField;
  private javax.swing.JTextField usernameTextField;
  // End of variables declaration//GEN-END:variables
}
