/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EditAndSaveCoordDialog.java
 *
 * Created on 09/12/2013, 12:45:24 PM
 */
package cct.modelling.ui;

import cct.interfaces.CoordinateBuilderInterface;
import cct.interfaces.MoleculeInterface;
import cct.modelling.FormatManager;
import cct.tools.IOUtils;
import cct.tools.TextClipboard;
import java.awt.FileDialog;
import java.awt.Font;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;

/**
 *
 * @author Vlad
 */
public class EditAndSaveCoordDialog extends javax.swing.JFrame implements ItemListener {

  private String defaultFileName = "text.txt";
  private FormatManager formatManager;
  private String selectedBuilder = "";
  private MoleculeInterface molecule = null;

  public EditAndSaveCoordDialog(String title) {
    super(title);
    initComponents();

    Font currentFont = coordTextArea.getFont();
    int size = currentFont.getSize();
    int style = currentFont.getStyle();
    String fontName = currentFont.getFontName();

    if (size < 12) {
      Font newFont = new Font(fontName, style, 12);
      coordTextArea.setFont(newFont);
    }
  }

  /**
   * Creates new form EditAndSaveCoordDialogNew
   */
  public EditAndSaveCoordDialog() {
    this("Edit & Save Coordinates Dialog");
  }

  public void setDefaultFileName(String file_name) {
    defaultFileName = file_name;
  }

  public void setMoleculeInterface(MoleculeInterface mol) {
    molecule = mol;
    buildCoordinates();
    okButton.grabFocus();
  }

  private void buildCoordinates() {
    if (molecule == null || molecule.getNumberOfAtoms() < 1) {
      return;
    }

    try {
      CoordinateBuilderInterface cbi = FormatManager.getCoordinateBuilder(selectedBuilder);
      coordTextArea.setText(cbi.getCoordinatesAsString(molecule, true));
      this.validate();
    } catch (Exception ex) {
      JOptionPane.showMessageDialog(this, "Cannot get coordinate builder " + selectedBuilder + " : " + ex.getMessage(), "Error",
              JOptionPane.ERROR_MESSAGE);
      return;
    }
  }

  public void setFormatManager(FormatManager format_manager) throws Exception {
    formatManager = format_manager;
    String[] builders = FormatManager.getCoordinateBuilders();

    formatsPanel.removeAll();

    if (builders == null) {
      throw new Exception("Cannot get list of coordinate builders: ");
    }

    coordTextArea.setText("");
    for (int i = 0; i < builders.length; i++) {
      JRadioButton jRadioButton = new JRadioButton();
      jRadioButton.setText(builders[i]);
      jRadioButton.setActionCommand(builders[i]);
      formatsPanel.add(jRadioButton);
      buttonGroup.add(jRadioButton);
      jRadioButton.addItemListener(this);
      if (i == 0) {
        jRadioButton.setSelected(true);
      } else {
        jRadioButton.setSelected(false);
      }
    }
    okButton.grabFocus();

    this.pack();
  }

  @Override
  public void itemStateChanged(ItemEvent e) {

    if (e.getStateChange() == ItemEvent.SELECTED) {
      selectedBuilder = ((JRadioButton) e.getSource()).getActionCommand();
      buildCoordinates();
    }
    okButton.grabFocus();
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this
   * method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    buttonGroup = new javax.swing.ButtonGroup();
    jScrollPane1 = new javax.swing.JScrollPane();
    coordTextArea = new javax.swing.JTextArea();
    jPanel1 = new javax.swing.JPanel();
    formatsPanel = new javax.swing.JPanel();
    jRadioButton1 = new JRadioButton();
    jRadioButton2 = new JRadioButton();
    jPanel3 = new javax.swing.JPanel();
    okButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();
    jMenuBar1 = new javax.swing.JMenuBar();
    jMenu1 = new javax.swing.JMenu();
    jMenuItem1 = new javax.swing.JMenuItem();
    jSeparator1 = new javax.swing.JPopupMenu.Separator();
    jMenuItem2 = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    coordTextArea.setColumns(40);
    coordTextArea.setRows(40);
    jScrollPane1.setViewportView(coordTextArea);

    getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

    jPanel1.setLayout(new java.awt.BorderLayout());

    formatsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Formats"));
    formatsPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

    jRadioButton1.setText("Sample Format");
    formatsPanel.add(jRadioButton1);

    jRadioButton2.setText("Other Format");
    formatsPanel.add(jRadioButton2);

    jPanel1.add(formatsPanel, java.awt.BorderLayout.NORTH);

    okButton.setText("OK");
    okButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        okButtonActionPerformed(evt);
      }
    });
    jPanel3.add(okButton);

    cancelButton.setText("Cancel");
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancelButtonActionPerformed(evt);
      }
    });
    jPanel3.add(cancelButton);

    jPanel1.add(jPanel3, java.awt.BorderLayout.SOUTH);

    getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

    jMenu1.setText("File");

    jMenuItem1.setText("Save as");
    jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem1ActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuItem1);
    jMenu1.add(jSeparator1);

    jMenuItem2.setText("Exit");
    jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem2ActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuItem2);

    jMenuBar1.add(jMenu1);

    setJMenuBar(jMenuBar1);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    setVisible(false);
  }//GEN-LAST:event_cancelButtonActionPerformed

  private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
    TextClipboard textTransfer = new TextClipboard();
    textTransfer.setClipboardContents(coordTextArea.getText());
    setVisible(false);
  }//GEN-LAST:event_okButtonActionPerformed

  private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
    setVisible(false);
  }//GEN-LAST:event_jMenuItem2ActionPerformed

  private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
    saveTextIntoFile();
  }//GEN-LAST:event_jMenuItem1ActionPerformed

  private void saveTextIntoFile() {
    String text = coordTextArea.getText();
    if (text == null || text.length() < 1) {
      JOptionPane.showMessageDialog(this, "Nothing to save", "Warning", JOptionPane.WARNING_MESSAGE);
      return;
    }

    FileDialog fd = new FileDialog(this, "Save File", FileDialog.SAVE);
    fd.setFile(defaultFileName);
    fd.setVisible(true);
    if (fd.getFile() != null) {
      String fileName = fd.getFile();
      String workingDirectory = fd.getDirectory();
      try {
        IOUtils.saveStringIntoFile(text, workingDirectory + fileName);
      } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Error Saving file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
      }
    }
  }

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        EditAndSaveCoordDialog frame = new EditAndSaveCoordDialog();
        frame.setTextArea("\"Amber\" refers to two things: a set of molecular mechanical force fields for the simulation of biomolecules (which are in the public domain, and are used in a variety of simulation programs); and a package of molecular simulation programs which includes source code and demos. ");
        frame.setVisible(true);
      }
    });
  }

  public void setTextArea(String text) {
    coordTextArea.setText(text);
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.ButtonGroup buttonGroup;
  private javax.swing.JButton cancelButton;
  private javax.swing.JTextArea coordTextArea;
  private javax.swing.JPanel formatsPanel;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JMenuItem jMenuItem1;
  private javax.swing.JMenuItem jMenuItem2;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel3;
  private JRadioButton jRadioButton1;
  private JRadioButton jRadioButton2;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JPopupMenu.Separator jSeparator1;
  private javax.swing.JButton okButton;
  // End of variables declaration//GEN-END:variables

}
